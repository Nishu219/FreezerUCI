import chess
import random

# Assign values to the pieces
piece_values = {
    chess.PAWN: 1,
    chess.KNIGHT: 3,
    chess.BISHOP: 3,
    chess.ROOK: 5,
    chess.QUEEN: 9,
    chess.KING: 100,  # king is invaluable
}

center_squares = {
    chess.E4: 1, chess.D4: 1, chess.E5: 1, chess.D5: 1,
    chess.C6: 0.5, chess.D6: 0.5, chess.E6: 0.5, chess.F6: 0.5,
    chess.C5: 0.5, chess.F5: 0.5, chess.C4: 0.5, chess.F4: 0.5,
    chess.C3: 0.5, chess.D3: 0.5, chess.E3: 0.5, chess.F3: 0.5,
}

def evaluate_board(board):
    # Sum of the piece values
    piece_value_sum = sum(piece_values.get(piece.piece_type, 0) for piece in board.piece_map().values())

    # Control of the center
    center_control = sum(center_squares.get(square, 0) for square in board.piece_map().keys())

    # Piece mobility
    piece_mobility = len(list(board.legal_moves))

    return piece_value_sum + center_control + piece_mobility

def minimax(board, depth, alpha, beta, maximizing_player):
    if depth == 0 or board.is_game_over():
        return evaluate_board(board)

    if maximizing_player:
        max_eval = -float('inf')
        for move in board.legal_moves:
            board.push(move)
            eval = minimax(board, depth - 1, alpha, beta, False)
            board.pop()
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            eval = minimax(board, depth - 1, alpha, beta, True)
            board.pop()
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def better_player(board):
    best_value = -float('inf')
    best_move = None

    for move in board.legal_moves:
        board.push(move)
        move_value = minimax(board, 4, -float('inf'), float('inf'), False)
        board.pop()
        if move_value > best_value:
            best_value = move_value
            best_move = move

    return best_move.uci()

def human_player(board):
    print(board)  # Print the board for the human player
    uci_move = input('Enter your move (e.g., e2e4): ')
    legal_uci_moves = [move.uci() for move in board.legal_moves]

    while uci_move not in legal_uci_moves:
        print("Illegal move. Try again.")
        uci_move = input('Enter your move: ')

    return uci_move

def play_game(player1, player4, board):
    while not board.is_game_over():
        if board.turn:
            print(f"\nYour turn ({'White' if board.turn else 'Black'})")
            uci_move = player1(board)
        else:
            print(f"\nAI's turn ({'White' if not board.turn else 'Black'})")
            uci_move = player4(board)

        print(f"\n{uci_move}\n")
        board.push_uci(uci_move)

    print(board)
    print("Game Over")
    print(board)
if __name__ == "__main__":
    print("I am Freezer, a hyperbot created by Anish. I play slowly but I can still give you a fight. I am UCI based and I have a brother who is GUI based. Still Anish likes me more than GUI")
    while True:
        choice = input("Do you want to play White (goes first) or Black (goes second)? ").upper()
        if choice in ("WHITE", "BLACK"):
            board = chess.Board()  # No mirroring for either choice
            if choice == "BLACK":
                board.turn = False  # Set Black's turn if they choose Black
            break
        else:
            print("Invalid choice. Please enter 'White' or 'Black'.")

    play_game(human_player, better_player, board)
